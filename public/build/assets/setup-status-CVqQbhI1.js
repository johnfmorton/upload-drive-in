var h=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports);var f=h((p,c)=>{class u{constructor(e={}){this.statusSteps=["database","mail","google_drive","migrations","admin_user","queue_worker"],this.refreshInProgress=!1,this.retryAttempts=0,this.maxRetryAttempts=3,this.retryDelay=2e3,this.autoRefreshInterval=null,this.autoRefreshEnabled=!1,this.autoInit=e.autoInit!==!1,this.refreshAllStatuses=this.refreshAllStatuses.bind(this),this.refreshSingleStep=this.refreshSingleStep.bind(this),this.handleRefreshError=this.handleRefreshError.bind(this),this.retryRefresh=this.retryRefresh.bind(this),this.autoInit&&this.init()}init(){this.setupCSRFToken(),this.bindEventListeners(),this.setupKeyboardNavigation(),setTimeout(()=>{this.refreshAllStatuses()},1e3)}setupCSRFToken(){var e;if(!document.querySelector('meta[name="csrf-token"]')){const t=document.createElement("meta");t.name="csrf-token",t.content=((e=document.querySelector('meta[name="csrf-token"]'))==null?void 0:e.getAttribute("content"))||"",document.head.appendChild(t)}}bindEventListeners(){const e=document.getElementById("refresh-status-btn");e&&e.addEventListener("click",this.refreshAllStatuses),this.statusSteps.forEach(s=>{const n=document.getElementById(`refresh-${s}-btn`);n&&n.addEventListener("click",()=>{this.refreshSingleStep(s)})});const t=document.getElementById("auto-refresh-toggle");t&&t.addEventListener("change",s=>{this.toggleAutoRefresh(s.target.checked)}),document.addEventListener("click",s=>{s.target.classList.contains("retry-refresh-btn")&&this.retryRefresh()});const r=document.getElementById("test-queue-worker-btn");r&&r.addEventListener("click",()=>this.testQueueWorker())}setupKeyboardNavigation(){document.addEventListener("keydown",e=>{(e.ctrlKey||e.metaKey)&&e.key==="r"&&!this.refreshInProgress&&(e.preventDefault(),this.refreshAllStatuses())})}getCSRFToken(){var t;const e=(t=document.querySelector('meta[name="csrf-token"]'))==null?void 0:t.getAttribute("content");return e||console.warn("CSRF token not found"),e}async refreshAllStatuses(){var e;if(this.refreshInProgress){console.log("Refresh already in progress, skipping...");return}try{this.setLoadingState(!0),this.clearErrorMessages();const t=await this.makeAjaxRequest("/setup/status/refresh",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":this.getCSRFToken(),"X-Requested-With":"XMLHttpRequest"}});if(!t.success)throw new Error(((e=t.error)==null?void 0:e.message)||"Failed to refresh status");this.updateAllStepStatuses(t.data.statuses),this.updateLastChecked(),this.resetRetryAttempts(),this.showSuccessMessage("Status refreshed successfully")}catch(t){console.error("Error refreshing all statuses:",t),this.handleRefreshError(t,"all")}finally{this.setLoadingState(!1)}}async refreshSingleStep(e){var t;if(this.refreshInProgress){console.log("Refresh already in progress, skipping...");return}if(!this.statusSteps.includes(e)){console.error("Invalid step name:",e);return}try{this.setSingleStepLoadingState(e,!0);const r=await this.makeAjaxRequest("/setup/status/refresh-step",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":this.getCSRFToken(),"X-Requested-With":"XMLHttpRequest"},body:JSON.stringify({step:e})});if(!r.success)throw new Error(((t=r.error)==null?void 0:t.message)||`Failed to refresh ${e} status`);this.updateStatusIndicator(e,r.data.status.status,r.data.status.message,r.data.status.details||r.data.status.message),this.updateLastChecked(),this.showSuccessMessage(`${r.data.status.step_name} status refreshed`)}catch(r){console.error(`Error refreshing ${e} status:`,r),this.handleRefreshError(r,e)}finally{this.setSingleStepLoadingState(e,!1)}}async makeAjaxRequest(e,t={}){var n;const r=new AbortController,s=setTimeout(()=>r.abort(),3e4);try{const i=await fetch(e,{...t,signal:r.signal});if(clearTimeout(s),!i.ok){const o=await i.json().catch(()=>({}));throw new Error(((n=o.error)==null?void 0:n.message)||`HTTP ${i.status}: ${i.statusText}`)}return await i.json()}catch(i){throw clearTimeout(s),i.name==="AbortError"?new Error("Request timed out. Please check your connection and try again."):i}}updateAllStepStatuses(e){this.statusSteps.forEach(t=>{if(e&&e[t]){const r=e[t];this.updateStatusIndicator(t,r.status,r.message,r.details||r.message)}else console.warn(`No status data found for step: ${t}`),this.updateStatusIndicator(t,"error","No Data","Status information not available")})}updateStatusIndicator(e,t,r,s=null){const n=document.getElementById(`status-${e}`),i=document.getElementById(`status-${e}-text`),o=document.getElementById(`details-${e}-text`);if(!n||!i){console.error(`Could not find status elements for step: ${e}`);return}const d=["status-completed","status-incomplete","status-error","status-checking","status-cannot-verify","status-needs_attention"];n.classList.remove(...d),n.classList.add(`status-${t}`),this.animateTextChange(i,r),this.updateStatusIcon(n,t),o&&s&&this.updateStatusDetails(e,t,s),n.setAttribute("aria-label",`${e} status: ${r}`)}updateStatusIcon(e,t){console.log(`SetupStatusManager: Updating icon for status: ${t}`);let r=e.querySelector("svg"),s=!1;if(r||(r=e.querySelector(".status-emoji"),s=!0,console.log("SetupStatusManager: Found emoji icon element")),!r){console.log("SetupStatusManager: Creating new emoji icon element"),r=document.createElement("span"),r.className="status-emoji w-4 h-4 mr-1.5 text-base";const o=e.querySelector("span");o?e.insertBefore(r,o):e.appendChild(r),s=!0}const n={completed:"‚úÖ",incomplete:"‚ùå",error:"üö´","cannot-verify":"‚ùì",needs_attention:"‚ö†Ô∏è",checking:"üîÑ"},i=n[t]||n.checking;if(console.log(`SetupStatusManager: Setting emoji to: ${i}`),s)r.textContent=i;else{const o=document.createElement("span");o.className="status-emoji w-4 h-4 mr-1.5 text-base",o.textContent=i,r.parentNode.replaceChild(o,r)}}animateTextChange(e,t){e.style.opacity="0.5",setTimeout(()=>{e.textContent=t,e.style.opacity="1"},150)}setLoadingState(e){this.refreshInProgress=e;const t=document.getElementById("refresh-status-btn"),r=document.getElementById("refresh-btn-text"),s=document.getElementById("refresh-spinner");t&&r&&s&&(t.disabled=e,r.textContent=e?"Checking...":"Check Status",e?s.classList.remove("hidden"):s.classList.add("hidden")),e&&this.statusSteps.forEach(n=>{this.updateStatusIndicator(n,"checking","Checking...","Verifying configuration...")})}setSingleStepLoadingState(e,t){t&&this.updateStatusIndicator(e,"checking","Checking...","Verifying configuration...")}handleRefreshError(e,t="all"){this.retryAttempts++,console.error(`Refresh error (attempt ${this.retryAttempts}):`,e),this.retryAttempts<this.maxRetryAttempts?(this.showRetryMessage(e.message,t),setTimeout(()=>{t==="all"?this.refreshAllStatuses():this.refreshSingleStep(t)},this.retryDelay*this.retryAttempts)):(this.showErrorState(e.message,t),this.resetRetryAttempts())}showRetryMessage(e,t){const r=`Failed to refresh status (${e}). Retrying in ${this.retryDelay*this.retryAttempts/1e3} seconds... (Attempt ${this.retryAttempts}/${this.maxRetryAttempts})`;this.showMessage(r,"warning")}showErrorState(e,t){t==="all"?this.statusSteps.forEach(r=>{this.updateStatusIndicator(r,"error","Check Failed","Unable to verify status. Please check your connection and try again.")}):this.updateStatusIndicator(t,"error","Check Failed","Unable to verify status. Please check your connection and try again."),this.showMessage(`Failed to refresh status: ${e}. Please check your connection and try again.`,"error",!0)}showMessage(e,t="info",r=!1){this.clearMessages();const s=document.createElement("div");s.className=`status-message status-message-${t}`,s.innerHTML=`
            <div class="flex items-center justify-between p-4 rounded-md ${this.getMessageClasses(t)}">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        ${this.getMessageIcon(t)}
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium">${e}</p>
                    </div>
                </div>
                ${r?`
                    <button class="retry-refresh-btn ml-4 bg-white bg-opacity-20 hover:bg-opacity-30 text-current px-3 py-1 rounded text-sm transition-colors">
                        Retry Now
                    </button>
                `:""}
                <button class="dismiss-message-btn ml-2 text-current hover:text-opacity-70" onclick="this.parentElement.parentElement.remove()">
                    <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        `;const n=document.querySelector(".text-center.mb-8");n&&n.insertAdjacentElement("afterend",s),t==="success"&&setTimeout(()=>{s.remove()},5e3)}getMessageClasses(e){const t={success:"bg-green-100 border border-green-200 text-green-800",error:"bg-red-100 border border-red-200 text-red-800",warning:"bg-yellow-100 border border-yellow-200 text-yellow-800",info:"bg-blue-100 border border-blue-200 text-blue-800"};return t[e]||t.info}getMessageIcon(e){const t={success:'<span class="w-5 h-5 text-lg">‚úÖ</span>',error:'<span class="w-5 h-5 text-lg">üö´</span>',warning:'<span class="w-5 h-5 text-lg">‚ö†Ô∏è</span>',info:'<span class="w-5 h-5 text-lg">‚ÑπÔ∏è</span>'};return t[e]||t.info}showSuccessMessage(e){this.showMessage(e,"success")}showErrorMessage(e,t=!1){this.showMessage(e,"error",t)}clearMessages(){document.querySelectorAll(".status-message").forEach(e=>e.remove())}clearErrorMessages(){document.querySelectorAll(".status-message-error").forEach(e=>e.remove())}async testQueueWorker(){const e=document.getElementById("test-queue-worker-btn"),t=document.getElementById("test-queue-worker-btn-text"),r=document.getElementById("queue-test-results"),s=document.getElementById("queue-test-status");if(!e||!t||!r||!s){console.error("Queue test elements not found");return}try{e.disabled=!0,t.textContent="Testing...",r.classList.remove("hidden"),s.innerHTML=`
                <div class="flex items-center">
                    <svg class="animate-spin h-4 w-4 text-blue-600 mr-2" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="text-blue-700">Dispatching test job...</span>
                </div>
            `;const n=await this.makeAjaxRequest("/setup/queue/test",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":this.getCSRFToken(),"X-Requested-With":"XMLHttpRequest"},body:JSON.stringify({delay:0})});if(n.success&&n.test_job_id)await this.pollQueueTestResult(n.test_job_id,s);else throw new Error(n.message||"Failed to dispatch test job")}catch(n){console.error("Queue test failed:",n),s.innerHTML=`
                <div class="flex items-center">
                    <svg class="h-4 w-4 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="text-red-700">Test failed: ${n.message}</span>
                </div>
            `}finally{e.disabled=!1,t.textContent="Test Queue Worker"}}async pollQueueTestResult(e,t){let s=0;const n=async()=>{s++;try{const i=await this.makeAjaxRequest(`/setup/queue/test/status?test_job_id=${e}`,{method:"GET",headers:{"X-CSRF-TOKEN":this.getCSRFToken(),"X-Requested-With":"XMLHttpRequest"}});if(i.success&&i.status){const o=i.status;switch(o.status){case"completed":t.innerHTML=`
                                <div class="flex items-center">
                                    <svg class="h-4 w-4 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span class="text-green-700">Queue worker is functioning properly! Job completed in ${(o.processing_time||0).toFixed(2)}s</span>
                                </div>
                            `;return;case"failed":t.innerHTML=`
                                <div class="flex items-center">
                                    <svg class="h-4 w-4 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span class="text-red-700">Queue test failed: ${o.error_message||"Unknown error"}</span>
                                </div>
                            `;return;case"processing":t.innerHTML=`
                                <div class="flex items-center">
                                    <svg class="animate-spin h-4 w-4 text-blue-600 mr-2" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 818-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <span class="text-blue-700">Test job is being processed... (${s}s)</span>
                                </div>
                            `;break;case"pending":t.innerHTML=`
                                <div class="flex items-center">
                                    <svg class="animate-pulse h-4 w-4 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span class="text-yellow-700">Test job is queued, waiting for worker... (${s}s)</span>
                                </div>
                            `;break}(o.status==="processing"||o.status==="pending")&&(s<30?setTimeout(n,1e3):t.innerHTML=`
                                <div class="flex items-center">
                                    <svg class="h-4 w-4 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span class="text-yellow-700">Test timed out after 30 seconds. The queue worker may not be running.</span>
                                </div>
                            `)}else throw new Error("Invalid response from server")}catch(i){console.error("Polling error:",i),t.innerHTML=`
                    <div class="flex items-center">
                        <svg class="h-4 w-4 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span class="text-red-700">Error checking test status: ${i.message}</span>
                    </div>
                `}};n()}updateLastChecked(){const e=document.getElementById("last-checked"),t=document.getElementById("last-checked-time");if(e&&t){const r=new Date;t.textContent=r.toLocaleTimeString(),e.classList.remove("hidden")}}resetRetryAttempts(){this.retryAttempts=0}retryRefresh(){this.resetRetryAttempts(),this.clearMessages(),this.refreshAllStatuses()}toggleAutoRefresh(e){this.autoRefreshEnabled=e,e?this.autoRefreshInterval=setInterval(()=>{this.refreshInProgress||this.refreshAllStatuses()},3e4):this.autoRefreshInterval&&(clearInterval(this.autoRefreshInterval),this.autoRefreshInterval=null)}updateStatusDetails(e,t,r){const s=document.getElementById(`details-${e}-text`);if(!s)return;let n="";if(typeof r=="object"){if(r.checked_at){const i=new Date(r.checked_at),o=this.getTimeAgo(i);n+=`<div class="mb-2"><strong>Last checked:</strong> ${o}</div>`}n+=this.getStatusSpecificDetails(e,t,r),(t==="incomplete"||t==="error"||t==="cannot_verify")&&(n+=this.getTroubleshootingGuidance(e,t,r))}else typeof r=="string"&&(n=`<div>${r}</div>`);s.innerHTML=n||"No additional details available."}getStatusSpecificDetails(e,t,r){let s="";switch(e){case"queue_worker":r.recent_jobs!==void 0&&(s+=`<div class="mb-2">
                        <strong>Queue Statistics:</strong>
                        <ul class="ml-4 mt-1 text-sm">
                            <li>Recent jobs (24h): ${r.recent_jobs}</li>
                            <li>Recent failed jobs: ${r.recent_failed_jobs||0}</li>
                            <li>Total failed jobs: ${r.total_failed_jobs||0}</li>
                            <li>Stalled jobs: ${r.stalled_jobs||0}</li>
                        </ul>
                    </div>`);break;case"database":r.connection_name&&(s+=`<div class="mb-2"><strong>Connection:</strong> ${r.connection_name}</div>`);break;case"mail":r.driver&&(s+=`<div class="mb-2"><strong>Mail driver:</strong> ${r.driver}</div>`);break;case"google_drive":r.client_id&&(s+='<div class="mb-2"><strong>Client ID configured:</strong> Yes</div>');break}return r.error&&(s+=`<div class="mb-2 p-2 bg-red-50 border border-red-200 rounded">
                <strong>Error:</strong> ${r.error}
            </div>`),s}getTroubleshootingGuidance(e,t,r){let s='<div class="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded">';switch(t==="cannot_verify"?(s+="<strong>Cannot Verify - Manual Check Required:</strong>",s+='<p class="text-sm mt-1 mb-2">The system cannot automatically verify this step. Please check manually:</p>'):s+="<strong>Troubleshooting:</strong>",s+='<ul class="ml-4 mt-2 text-sm">',e){case"database":t==="cannot_verify"?(s+="<li>Check your database connection settings in .env file</li>",s+="<li>Ensure your database server is running</li>",s+="<li>Verify database credentials are correct</li>",s+="<li><strong>Manual verification:</strong> Try running <code>php artisan migrate:status</code></li>"):t==="incomplete"&&(s+="<li>Run database migrations: <code>php artisan migrate</code></li>",s+="<li>Check if all required tables exist</li>");break;case"mail":t==="cannot_verify"&&(s+="<li>Check mail configuration in .env file</li>",s+="<li>For local development, consider using log driver</li>",s+="<li>Verify SMTP credentials if using external mail service</li>",s+="<li><strong>Manual verification:</strong> Try sending a test email or check logs</li>");break;case"google_drive":t==="incomplete"&&(s+="<li>Set GOOGLE_DRIVE_CLIENT_ID in .env file</li>",s+="<li>Set GOOGLE_DRIVE_CLIENT_SECRET in .env file</li>",s+="<li>Complete OAuth setup in Google Cloud Console</li>");break;case"queue_worker":t==="cannot_verify"?(s+="<li>Start queue worker: <code>php artisan queue:work</code></li>",s+="<li>Check if queue tables exist in database</li>",s+="<li><strong>Manual verification:</strong> Use the test button above to verify functionality</li>",s+="<li>Check queue status with: <code>php artisan queue:monitor</code></li>"):t==="needs_attention"&&(s+="<li>Check failed jobs: <code>php artisan queue:failed</code></li>",s+="<li>Restart queue worker if needed</li>",s+="<li>Review application logs for errors</li>");break;case"admin_user":t==="incomplete"&&(s+="<li>Create admin user: <code>php artisan make:admin</code></li>",s+="<li>Or register through the web interface</li>");break;case"migrations":t==="incomplete"&&(s+="<li>Run migrations: <code>php artisan migrate</code></li>",s+="<li>Check database connection first</li>");break}return s+="</ul></div>",s}getTimeAgo(e){const r=new Date-e,s=Math.floor(r/1e3),n=Math.floor(s/60),i=Math.floor(n/60);return s<60?"Just now":n<60?`${n} minute${n!==1?"s":""} ago`:i<24?`${i} hour${i!==1?"s":""} ago`:e.toLocaleString()}toggleStatusDetails(e){const t=document.getElementById(`details-${e}`);t&&t.classList.toggle("show")}cleanup(){this.autoRefreshInterval&&clearInterval(this.autoRefreshInterval)}}let a;function g(l){a&&a.toggleStatusDetails(l)}window.toggleStatusDetails=g;document.addEventListener("DOMContentLoaded",function(){console.log("SetupStatusManager: DOM loaded, initializing..."),a=new u,console.log("SetupStatusManager: Instance created"),window.addEventListener("beforeunload",()=>{a&&a.cleanup()})});typeof c<"u"&&c.exports&&(c.exports=u)});export default f();
